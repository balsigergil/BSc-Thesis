for table_index in 2..8 {
    let mut fx_calculator = FxCalculator::new(proof.k, table_index);
    let mut temp_fx_values = Vec::new();
    let mut temp_metadata = Vec::new();

    for i in (0..(1 << (8 - table_index))).step_by(2) {
        let left_entry = PlotEntry {
            fx: from_bits(&fx_values[i]),
            //...
        };
        let right_entry = PlotEntry {
            fx: from_bits(&fx_values[i + 1]),
            //...
        };
        let left_bucket = vec![left_entry];
        let right_bucket = vec![right_entry];

        if fx_calculator
            .find_matches(&left_bucket, &right_bucket).len() != 1
        {
            return false;
        }

        let (fx, collate) = fx_calculator.calculate_fn(
            &fx_values[i], &metadata[i], &metadata[i + 1]
        );
        temp_fx_values.push(fx);
        temp_metadata.push(collate);
    }
    fx_values = temp_fx_values;
    metadata = temp_metadata;
}